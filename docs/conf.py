#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Fuzzinator documentation build configuration file, created by sphinx-quickstart
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

# General information about the project.
project = 'Fuzzinator'
author = 'Renata Hodovan, Akos Kiss'
copyright = '2016-2017, %s' % author

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
import os
import sys
sys.path.insert(0, os.path.abspath('..'))

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
from fuzzinator import __version__ as version
# The full version, including alpha/beta/rc tags.
release = version
if release.endswith('r'):
    try:
        import subprocess
        release = '%s+%s' % (version, subprocess.check_output('git show -s --format="%h"',
                                                              shell=True, universal_newlines=True))
    except:
        pass

# -- Project-specific extensions ------------------------------------------

def setup(app):
    from docutils import nodes
    from docutils.transforms import Transform
    from sphinx import addnodes

    # Add section header above all top-level classes and functions in
    # autodoc-generated documentation to make them appear in TOC.
    class AddApiToToc(Transform):
        default_priority = 50
        def apply(self):
            # desc nodes of sphinx represent domain-specific entities,
            # their first children, desc_signature nodes, are their "heads"
            for signode in self.document.traverse(addnodes.desc_signature):
                descnode = signode.parent
                domain = descnode['domain']
                objtype = descnode['objtype']
                # only interested in py:class and py:function entities
                if domain != 'py' or objtype not in ['class', 'function']:
                    continue

                # wrap the desc node in a section node, which will appear in TOC
                name = signode['fullname']
                secname = objtype + ' ' + name
                _ = ''
                secnode = nodes.section(_, nodes.title(_, objtype + ' ', nodes.literal(_, name)),
                                        ids=[nodes.make_id(secname)],
                                        names=[nodes.fully_normalize_name(secname)])
                descnode.replace_self(secnode)
                secnode += descnode

    # Useful for README.rst that is also included by docs/introduction.rst but
    # is linking to docs/tutorial.rst. (From within docs/introduction.rst, the
    # proper way of linking would be :docs:`tutorial`, but that cannot be used
    # in the standalone README.rst.)
    class FixOuterDocLinks(Transform):
        default_priority = 900
        def apply(self):
            # reference nodes represent embedded uris
            for refnode in self.document.traverse(nodes.reference):
                refuri = refnode['refuri']
                # only interested in local references to files docs/FILENAME.rst
                if not refuri.startswith('docs/') or not refuri.endswith('.rst'):
                    continue

                # replace them with :doc:`/FILENAME` to turn them into
                # sphinx-specific direct document links
                _ = ''
                xrefnode = addnodes.pending_xref(_, nodes.inline(_, *tuple(refnode.children), classes=['xref', 'doc']),
                                                 refdoc='.'.join(self.document['source'].rpartition('docs/')[2].rsplit('.', maxsplit=1)[:-1]),
                                                 refdomain='',
                                                 refexplicit=True,
                                                 reftarget=refuri[len('docs'):-len('.rst')],
                                                 reftype='doc',
                                                 refwarn=True)
                refnode.replace_self(xrefnode)

    app.add_transform(AddApiToToc)
    app.add_transform(FixOuterDocLinks)

# -- General configuration ------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.doctest',
    'sphinx.ext.intersphinx',
    'sphinx.ext.todo',
    'sphinx.ext.coverage',
]

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
source_suffix = '.rst'

# The master toctree document.
master_doc = 'index'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = None

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This patterns also effect to html_static_path and html_extra_path
exclude_patterns = ['_build', 'Thumbs.db', '.DS_Store']

# If true, '()' will be appended to :func: etc. cross-reference text.
#
add_function_parentheses = False

# If true, the current module name will be prepended to all description
# unit titles (such as .. function::).
#
add_module_names = True

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = True


# -- Options for HTML output ----------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.

# on_rtd is whether we are on readthedocs.org
on_rtd = os.environ.get('READTHEDOCS', None) == 'True'

if not on_rtd:  # only import and set the theme if we're building docs locally
    import sphinx_rtd_theme
    html_theme = 'sphinx_rtd_theme'
    html_theme_path = [sphinx_rtd_theme.get_html_theme_path()]

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
# html_theme_options = {}

# The name for this set of Sphinx documents.
# "<project> v<release> documentation" by default.
#
html_title = '%s %s documentation' % (project, release)

# A shorter title for the navigation bar.  Default is the same as html_title.
#
html_short_title = '%s %s documentation' % (project, version)

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
# html_static_path = ['_static']

# If true, links to the reST sources are added to the pages.
#
html_show_sourcelink = False


# -- Options for HTMLHelp output ------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = 'fuzzinatordoc'


# -- Options for LaTeX output ---------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',

    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',

    # Additional stuff for the LaTeX preamble.
    #
    # 'preamble': '',

    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (master_doc, 'fuzzinator.tex', '%s Documentation' % project, author, 'manual'),
]


# -- Options for manual page output ---------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (master_doc, 'fuzzinator', '%s Documentation' % project, [author], 1)
]


# -- Options for Texinfo output -------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (master_doc, 'fuzzinator', '%s Documentation' % project,
     author, project, 'Random Testing Framework',
     'Miscellaneous'),
]


# Example configuration for intersphinx: refer to the Python standard library.
intersphinx_mapping = {'https://docs.python.org/3/': None}

autoclass_content = 'both'
